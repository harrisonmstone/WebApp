# -*- coding: utf-8 -*-
"""Capital_Accounts_Automated.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hL7WFQdK9mAs7J_R0UXOflt1shSbzPvo
"""
import pandas as pd
import numpy as np
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from datetime import datetime
import os
import re

"""# Functions"""

# Functions provided by the user
def find_start_row(sheet):
    for index, row in sheet.iterrows():
        # Use iloc to correctly access the second and third columns
        second_column_value = str(row.iloc[1]).strip().replace('\n', ' ')
        third_column_value = str(row.iloc[2]).strip().replace('\n', ' ')

        if 'Subscription Amount' in second_column_value or 'Subscription Amount' in third_column_value:
            return index
    return None

def remove_null_headers(df):
    # Identify columns where the header is NaN or null
    null_header_columns = df.columns[df.columns.isnull()]

    # Drop those columns
    df = df.drop(columns=null_header_columns)

    return df

def correct_rounding_issues(row):
    quarter_balance = row['Current Quarter Ending Balance']
    year_balance = row['Ending Balance_1']
    inception_balance = row['Ending Balance_2']

    balances = [quarter_balance, year_balance, inception_balance]

    # Check if two values are the same and one is different
    if len(set(balances)) == 2:
        most_common = max(set(balances), key=balances.count)
        row['Current Quarter Ending Balance'] = most_common
        row['Ending Balance_1'] = most_common
        row['Ending Balance_2'] = most_common
    elif len(set(balances)) == 3:
        median_value = np.median(balances)
        row['Current Quarter Ending Balance'] = median_value
        row['Ending Balance_1'] = median_value
        row['Ending Balance_2'] = median_value

    return row

def merge_with_fallback(df1, df2, key1, key2):
    # Try merging with the first column
    merged_df = pd.merge(df1, df2, left_on=df1.columns[0], right_on=key1, how='inner', suffixes=('_1', '_2'))
    if merged_df.empty:
        # If no matches, try merging with the second column
        merged_df = pd.merge(df1, df2, left_on=df1.columns[0], right_on=key2, how='inner', suffixes=('_1', '_2'))
    return merged_df

def trim_data(df):
    start_row = find_start_row(df)
    if start_row is not None:
        new_header = df.iloc[start_row]
        df = df.iloc[start_row + 1:]
        df.columns = new_header
        df.reset_index(drop=True, inplace=True)
        return df
    else:
        print("Subscription Amount not found in the second column.")
        return df

def remove_duplicate_columns(df):
    return df.loc[:, ~df.columns.duplicated()]

def remove_invalid_backstop_id(df):
    df_cleaned = df.dropna(subset=['Backstop ID'])
    df_cleaned = df_cleaned[df_cleaned['Backstop ID'] != 0]
    return df_cleaned

def sanitize_filename(text):
    # Replace only problematic characters, leaving apostrophes intact
    return re.sub(r'[\/:*?"<>|]', '', text).replace("NaN", "0")


def get_closing_date():
    today = datetime.now()
    if today.month in [4, 5]:
        quarter = 1
        year = today.year
        closing_date = datetime(year, 3, 31)
    elif today.month in [6, 7, 8]:
        quarter = 2
        year = today.year
        closing_date = datetime(year, 6, 30)
    elif today.month in [9, 10, 11]:
        quarter = 3
        year = today.year
        closing_date = datetime(year, 9, 30)
    else:
        quarter = 4
        year = today.year - 1
        closing_date = datetime(year, 12, 31)
    return closing_date.strftime("%Y~%m~%d")

def clean_date():
    today = datetime.now()
    if today.month in [4, 5]:
        quarter = 1
        year = today.year
        closing_date = datetime(year, 3, 31)
    elif today.month in [6, 7, 8]:
        quarter = 2
        year = today.year
        closing_date = datetime(year, 6, 30)
    elif today.month in [9, 10, 11]:
        quarter = 3
        year = today.year
        closing_date = datetime(year, 9, 30)
    else:
        quarter = 4
        year = today.year - 1
        closing_date = datetime(year, 12, 31)
    return closing_date.strftime("%B %d, %Y")

# Helper function to process values
def process_value(value):
    if pd.isna(value):
        return "-"
    else:
        rounded_value = int(round(value, 0))
        return '-' if rounded_value == 0 else f"{rounded_value:,}" if rounded_value > 0 else f"({abs(rounded_value):,})"

# Function to generate PDF header
def generate_header(c, category, company_name, current_date):
    c.setFont("Helvetica-Bold", 13)
    c.drawCentredString(300, 760, category)  # Adjusted y-coordinate
    c.setFont("Helvetica-Bold", 12)
    c.drawCentredString(300, 742, "Investment Position Worksheet")
    c.setFont("Helvetica-Bold", 12)
    c.drawCentredString(300, 724, company_name)
    c.setFont("Helvetica-Bold", 10)
    c.drawCentredString(300, 706, current_date)

# Function to generate financial information section
def generate_financial_info(c, capital_commitment, capital_contribution):
    c.setStrokeColorRGB(0, 0, 0)
    c.setLineWidth(2)
    c.rect(50, 640, 240, 50, stroke=1, fill=0)  # Adjusted position and size

    c.setFont("Helvetica-Bold", 10)
    label_x = 60
    value_x = 285

    capital_commitment_label = "Capital Commitment:"
    capital_commitment_value = f"{capital_commitment:,}"
    c.drawString(label_x, 675, capital_commitment_label)
    c.drawRightString(value_x, 675, capital_commitment_value)

    capital_contribution_label = "Capital Contribution:"
    capital_contribution_value = f"{capital_contribution:,}"
    c.drawString(label_x, 660, capital_contribution_label)
    c.drawRightString(value_x, 660, capital_contribution_value)

    percent_contribution_label = "% Capital Contribution:"
    percent_contribution_value = f"{round((capital_contribution / capital_commitment) * 100, 2):.2f}%"
    c.drawString(label_x, 645, percent_contribution_label)
    c.drawRightString(value_x, 645, percent_contribution_value)

# Function to generate financial information table
def generate_financial_table(c, labels, quarter_values, year_values, inception_values):
    table_x = 35
    table_y = 610  # Adjusted y-coordinate
    label_width = 300
    value_width = 125
    row_height = 15  # Reduced row height
    gap = 10

    for i, (label, q_value, y_value, i_value) in enumerate(zip(labels, quarter_values, year_values, inception_values)):
        if label == "Net Income" and labels[i + 1] == "Management Fees":
            c.setFont("Helvetica-Oblique", 10)
        elif i == 0:
            c.setFont("Helvetica-Bold", 10)
        else:
            c.setFont("Helvetica", 10)

        label_x = table_x + gap
        q_value_x = table_x + label_width + gap
        y_value_x = q_value_x + value_width
        i_value_x = y_value_x + value_width
        value_y = table_y - i * row_height

        if label in ["Net Income", "Syndication Costs", "LP Interest"] and labels[i - 1] in ["Unrealized Gain (loss) on Investments", "Net Income", "Syndication Costs"]:
            label_x += 30

        c.drawString(label_x, value_y, label)
        c.drawRightString(q_value_x, value_y, str(q_value))
        c.drawRightString(y_value_x, value_y, str(y_value))
        c.drawRightString(i_value_x, value_y, str(i_value))

def add_notes_box(canvas):
    box_width = 300
    box_height = 80  # Reduced height
    margin = 20
    box_x = margin
    box_y = 290

    canvas.setStrokeColorRGB(0, 0, 0)
    canvas.rect(box_x, box_y, box_width, box_height, stroke=1, fill=0)

    canvas.setFont("Helvetica", 12)
    notes_text = "Notes:"
    canvas.drawString(box_x + 10, box_y + box_height - 20, notes_text)

"""# Path"""

folder_path = "/content/drive/MyDrive/Sheets"

# Get a list of all Excel files in the folder
excel_files = [f for f in os.listdir(folder_path) if f.endswith('.xlsx')]

# Print the list of recognized Excel files
print("Recognized Excel files:", excel_files)

"""# Data Preparation"""

# original

for excel_file in excel_files:
    try:
        file_path = os.path.join(folder_path, excel_file)

        # Load the Excel file
        sheets = ['Quarter', 'Year', 'Inception']
        dfs = pd.read_excel(file_path, sheet_name=sheets)

        df_quarter = dfs['Quarter']
        df_year = dfs['Year']
        df_inception = dfs['Inception']

        # Applying trim_data, removing duplicates and invalid backstop IDs
        df_quarter = trim_data(df_quarter)
        df_year = trim_data(df_year)
        df_inception = trim_data(df_inception)

        df_quarter = df_quarter[df_quarter.iloc[:, 1].notna()]
        df_quarter = remove_duplicate_columns(df_quarter)

        df_year = df_year[df_year.iloc[:, 1] != 0]
        df_year = remove_duplicate_columns(df_year)

        df_inception = df_inception[df_inception.iloc[:, 1] != 0]
        df_inception = remove_duplicate_columns(df_inception)

        df_quarter = df_quarter.fillna(0)
        df_year = df_year.fillna(0)
        df_inception = df_inception.fillna(0)

        # First merge df_quarter and df_year using the first column as usual
        merged_df = pd.merge(df_quarter, df_year, left_on=df_quarter.columns[0], right_on=df_year.columns[0], suffixes=('_quarter', '_year'))

        # Merge with df_inception, trying the first and then second column
        merged_df = merge_with_fallback(merged_df, df_inception, df_inception.columns[0], df_inception.columns[1])

        final_df = remove_invalid_backstop_id(merged_df)

        # Correct rounding issues
        final_df = final_df.apply(correct_rounding_issues, axis=1)

        # Extract or manually set the correct header
        header = final_df.columns[0]
        if "Unnamed" in header or "Fund Name" in header:
            # Try to manually set the correct header by inspecting the data
            header = final_df.iloc[0, 0]  # Assuming the fund name might be in the first row of the first column
            final_df.columns.values[0] = header  # Rename the column header
        else:
            header = sanitize_filename(header)  # Sanitize the header if it's already correct

        # Define a static or common directory path for all PDFs related to this file
        base_pdf_path = f"/content/drive/MyDrive/PDFs/{header}/"
        os.makedirs(base_pdf_path, exist_ok=True)

        report_count = 0  # To count the number of reports generated for each fund

        for index, row in final_df.iterrows():
            try:

                if row.iloc[0] == "LP Total":
                  break

                # Extract unique values for each report
                capital_commitment = round(row['Subscription\nAmount'])  # Ensure the column name is exactly correct
                capital_contribution = round(row['Capital Contributed'])  # Ensure the column name is exactly correct

                company_name = sanitize_filename(row.iloc[0])  # Company name for each row
                backstop_id = row['Backstop ID']
                name_date = get_closing_date()
                current_date = clean_date()

                # Construct the PDF filename using the common directory path
                pdf_filename = f"{base_pdf_path}{name_date}_VI-A Capital Account {company_name}_{int(backstop_id)}.pdf"

                c = canvas.Canvas(pdf_filename, pagesize=letter)

                # Generate the financial report contents
                quarter_partner_capital_formatted = process_value(row['Previous Qtr. Balance'])
                quarter_capital_contributions_formatted = process_value(row['Quarter Capital Contribution'])
                quarter_distributions_formatted = process_value(row['Distribution_quarter'])
                quarter_management_fees_formatted = process_value(row['Management Fees_quarter'])
                quarter_net_operating_income_formatted = process_value(row['Net Operating Income_quarter'])
                quarter_realized_gain_formatted = process_value(row['Realized\nGain (Loss)_quarter'])
                quarter_unrealized_gain_formatted = process_value(row['Unrealized\nGain (Loss)_quarter'])
                quarter_net_income_formatted = process_value(row['Management Fees_quarter'] + row['Net Operating Income_quarter'] + row['Realized\nGain (Loss)_quarter'] + row['Unrealized\nGain (Loss)_quarter'])
                quarter_syndication_formatted = process_value(row['Syndication Costs_quarter'])
                quarter_lp_formatted = process_value(row['LP Interest_quarter'])
                quarter_total = f"{int(round(row['Current Quarter Ending Balance'], 0)):,}"

                year_partner_capital_formatted = process_value(row['Prior Year Balance'])
                year_capital_contributions_formatted = process_value(row['Period Capital Contribution_1'])
                year_distributions_formatted = process_value(row['Distribution_year'])
                year_management_fees_formatted = process_value(row['Management Fees_year'])
                year_net_operating_income_formatted = process_value(row['Net Operating Income_year'])
                year_realized_gain_formatted = process_value(row['Realized\nGain (Loss)_year'])
                year_unrealized_gain_formatted = process_value(row['Unrealized\nGain (Loss)_year'])
                year_net_income_formatted = process_value(row['Management Fees_year'] + row['Net Operating Income_year'] + row['Realized\nGain (Loss)_year'] + row['Unrealized\nGain (Loss)_year'])
                year_syndication_formatted = process_value(row['Syndication Costs_year'])
                year_lp_formatted = process_value(row['LP Interest_year'])
                year_total = f"{int(round(row['Ending Balance_1'], 0)):,}"

                inception_partner_capital_formatted = process_value(row['Beginning Balance'])
                inception_capital_contributions_formatted = process_value(row['Period Capital Contribution_2'])
                inception_distributions_formatted = process_value(row['Distribution'])
                inception_management_fees_formatted = process_value(row['Management Fees'])
                inception_net_operating_income_formatted = process_value(row['Net Operating Income'])
                inception_realized_gain_formatted = process_value(row['Realized\nGain (Loss)'])
                inception_unrealized_gain_formatted = process_value(row['Unrealized\nGain (Loss)'])
                inception_net_income_formatted = process_value(row['Management Fees'] + row['Net Operating Income'] + row['Realized\nGain (Loss)'] + row['Unrealized\nGain (Loss)'])
                inception_syndication_formatted = process_value(row['Syndication Costs'])
                inception_lp_formatted = process_value(row['LP Interest'])
                inception_total = f"{int(round(row['Ending Balance_2'], 0)):,}"

                labels = ["Statement of Partner's Capital:", " ", "Partner's Capital", "Capital Contributions", " ", "Distributions", " ", "Net Income", "Management Fees", "Net Operating Income (loss)", "Realized Gain (loss) on Investments", "Unrealized Gain (loss) on Investments", "Net Income", "Syndication Costs", "LP Interest", f"Limited Partner's Capital-{current_date}"]
                quarter_values = ["Quarter to Date", " ", quarter_partner_capital_formatted, quarter_capital_contributions_formatted, " ", quarter_distributions_formatted, " ", " ", quarter_management_fees_formatted, quarter_net_operating_income_formatted, quarter_realized_gain_formatted, quarter_unrealized_gain_formatted, quarter_net_income_formatted, quarter_syndication_formatted, quarter_lp_formatted, quarter_total]
                year_values = ["Year to Date   ", "", year_partner_capital_formatted, year_capital_contributions_formatted, "", year_distributions_formatted, "", "", year_management_fees_formatted, year_net_operating_income_formatted, year_realized_gain_formatted, year_unrealized_gain_formatted, year_net_income_formatted, year_syndication_formatted, year_lp_formatted, year_total]
                inception_values = ["Inception to Date", "", inception_partner_capital_formatted, inception_capital_contributions_formatted, "", inception_distributions_formatted, "", "", inception_management_fees_formatted, inception_net_operating_income_formatted, inception_realized_gain_formatted, inception_unrealized_gain_formatted, inception_net_income_formatted, inception_syndication_formatted, inception_lp_formatted, inception_total]

                generate_header(c, header, company_name, current_date)
                generate_financial_info(c, capital_commitment, capital_contribution)  # Use the extracted values here
                generate_financial_table(c, labels, quarter_values, year_values, inception_values)
                add_notes_box(c)

                c.setLineWidth(2)
                c.line(260, 608, 350, 608)  # Adjusted positions
                c.line(390, 608, 475, 608)
                c.line(510, 608, 600, 608)

                c.line(260, 443, 350, 443)
                c.line(390, 443, 475, 443)
                c.line(510, 443, 600, 443)

                c.line(260, 426, 350, 426)
                c.line(390, 426, 475, 426)
                c.line(510, 426, 600, 426)

                c.line(260, 396, 350, 396)
                c.line(390, 396, 475, 396)
                c.line(510, 396, 600, 396)

                c.setLineWidth(1)
                c.line(260, 382, 350, 382)
                c.line(390, 382, 475, 382)
                c.line(510, 382, 600, 382)
                c.line(260, 379, 350, 379)
                c.line(390, 379, 475, 379)
                c.line(510, 379, 600, 379)

                c.save()

                report_count += 1  # Increment the report count for this fund

            except Exception as e:
                print(f"Error processing row {index} in file {excel_file}: {e}")

        # After processing all rows, print the correct header and the number of reports generated
        print(f"{header} - {report_count} reports")

    except Exception as e:
        print(f"Error processing file {excel_file}: {e}")

print("All files processed.")

# Adjust display settings to show all columns
pd.set_option('display.max_columns', None)  # Show all columns
pd.set_option('display.width', 1000)        # Set display width to fit all columns

# Assuming final_df is already defined earlier in your code
# For example purposes, let's assume final_df is available

# Print the final DataFrame with all column
final_df

# Reset the options to default if needed
# pd.reset_option('display.max_columns')
# pd.reset_option('display.width')

"""# Special Cases"""

# fund IV-A

for excel_file in excel_files:
    try:
        file_path = os.path.join(folder_path, excel_file)

        # Load the Excel file
        sheets = ['Quarter', 'Year', 'Inception']
        dfs = pd.read_excel(file_path, sheet_name=sheets)

        df_quarter = dfs['Quarter']
        df_year = dfs['Year']
        df_inception = dfs['Inception']

        # Applying trim_data, removing duplicates and invalid backstop IDs
        df_quarter = trim_data(df_quarter)
        df_year = trim_data(df_year)
        df_inception = trim_data(df_inception)

        df_quarter = df_quarter[df_quarter.iloc[:, 1].notna()]
        df_quarter = remove_duplicate_columns(df_quarter)

        df_year = df_year[df_year.iloc[:, 1] != 0]
        df_year = remove_duplicate_columns(df_year)

        df_inception = df_inception[df_inception.iloc[:, 1] != 0]
        df_inception = remove_duplicate_columns(df_inception)

        df_quarter = df_quarter.fillna(0)
        df_year = df_year.fillna(0)
        df_inception = df_inception.fillna(0)

        # First merge df_quarter and df_year using the first column as usual
        merged_df = pd.merge(df_quarter, df_year, left_on=df_quarter.columns[0], right_on=df_year.columns[0], suffixes=('_quarter', '_year'))

        # Merge with df_inception, trying the first and then second column
        merged_df = merge_with_fallback(merged_df, df_inception, df_inception.columns[0], df_inception.columns[1])

        final_df = remove_invalid_backstop_id(merged_df)

        # Correct rounding issues
        final_df = final_df.apply(correct_rounding_issues, axis=1)

        # Extract or manually set the correct header
        header = final_df.columns[0]
        if "Unnamed" in header or "Fund Name" in header:
            # Try to manually set the correct header by inspecting the data
            header = final_df.iloc[0, 0]  # Assuming the fund name might be in the first row of the first column
            final_df.columns.values[0] = header  # Rename the column header
        else:
            header = sanitize_filename(header)  # Sanitize the header if it's already correct

        # Define a static or common directory path for all PDFs related to this file
        base_pdf_path = f"/content/drive/MyDrive/PDFs/{header}/"
        os.makedirs(base_pdf_path, exist_ok=True)

        # **Add this block to convert necessary columns to numeric**
        numeric_columns = [
            'Subscription\nAmount', 'Capital Contributed', 'Previous Qtr. Balance',
            'Quarter Capital Contribution', 'Distribution_quarter', 'Management Fees_quarter',
            'Net Operating Income_quarter', 'Realized\nGain (Loss)_quarter', 'Unrealized\nGain (Loss)_quarter',
            'Current Quarter Ending Balance', 'Prior Year Balance', 'Period Capital Contribution_1',
            'Distribution_year', 'Management Fees_year', 'Net Operating Income_year',
            'Realized\nGain (Loss)_year', 'Unrealized\nGain (Loss)_year', 'Ending Balance_1',
            'Beginning Balance', 'Period Capital Contribution_2', 'Distribution', 'Management Fees',
            'Net Operating Income', 'Realized\nGain (Loss)', 'Unrealized\nGain (Loss)', 'Ending Balance_2',
            'Syndication Costs_quarter', 'LP Interest_quarter', 'Syndication Costs_year', 'LP Interest_year',
            'Syndication Costs', 'LP Interest'
        ]

        # Convert columns to numeric
        for col in numeric_columns:
            if col in final_df.columns:
                final_df[col] = pd.to_numeric(final_df[col].replace(r'[\$,]', '', regex=True), errors='coerce')
            else:
                print(f"Warning: Column '{col}' not found in DataFrame.")

        report_count = 0  # To count the number of reports generated for each fund

        for index, row in final_df.iterrows():
            try:

                if row.iloc[0] == "LP Total":
                    break

                # **Check for NaN values before rounding**
                if pd.isna(row['Subscription\nAmount']) or pd.isna(row['Capital Contributed']):
                    print(f"Non-numeric data in row {index}. Skipping this row.")
                    continue

                # Extract unique values for each report
                capital_commitment = round(row['Subscription\nAmount'])  # Ensure the column name is exactly correct
                capital_contribution = round(row['Capital Contributed'])  # Ensure the column name is exactly correct

                company_name = sanitize_filename(row.iloc[0])  # Company name for each row
                backstop_id = row['Backstop ID']
                name_date = get_closing_date()
                current_date = clean_date()

                # Construct the PDF filename using the common directory path
                pdf_filename = f"{base_pdf_path}{name_date}_UV IV A Capital Account {company_name}_{int(backstop_id)}.pdf"

                c = canvas.Canvas(pdf_filename, pagesize=letter)

                # **Ensure all values are numeric before processing**
                def safe_sum(*args):
                    return sum([value if not pd.isna(value) else 0 for value in args])

                # Generate the financial report contents
                quarter_partner_capital_formatted = process_value(row['Previous Qtr. Balance'])
                quarter_capital_contributions_formatted = process_value(row['Quarter Capital Contribution'])
                quarter_distributions_formatted = process_value(row['Distribution_quarter'])
                quarter_management_fees_formatted = process_value(row['Management Fees_quarter'])
                quarter_net_operating_income_formatted = process_value(row['Net Operating Income_quarter'])
                quarter_realized_gain_formatted = process_value(row['Realized\nGain (Loss)_quarter'])
                quarter_unrealized_gain_formatted = process_value(row['Unrealized\nGain (Loss)_quarter'])
                quarter_net_income_formatted = process_value(
                    safe_sum(
                        row['Management Fees_quarter'],
                        row['Net Operating Income_quarter'],
                        row['Realized\nGain (Loss)_quarter'],
                        row['Unrealized\nGain (Loss)_quarter']
                    )
                )
                quarter_syndication_formatted = process_value(row['Syndication Costs_quarter'])
                quarter_lp_formatted = process_value(row['LP Interest_quarter'])
                quarter_total = f"{int(round(row['Current Quarter Ending Balance'], 0)):,}"

                year_partner_capital_formatted = process_value(row['Prior Year Balance'])
                year_capital_contributions_formatted = process_value(row['Period Capital Contribution_1'])
                year_distributions_formatted = process_value(row['Distribution_year'])
                year_management_fees_formatted = process_value(row['Management Fees_year'])
                year_net_operating_income_formatted = process_value(row['Net Operating Income_year'])
                year_realized_gain_formatted = process_value(row['Realized\nGain (Loss)_year'])
                year_unrealized_gain_formatted = process_value(row['Unrealized\nGain (Loss)_year'])
                year_net_income_formatted = process_value(
                    safe_sum(
                        row['Management Fees_year'],
                        row['Net Operating Income_year'],
                        row['Realized\nGain (Loss)_year'],
                        row['Unrealized\nGain (Loss)_year']
                    )
                )
                year_syndication_formatted = process_value(row['Syndication Costs_year'])
                year_lp_formatted = process_value(row['LP Interest_year'])
                year_total = f"{int(round(row['Ending Balance_1'], 0)):,}"

                inception_partner_capital_formatted = process_value(row['Beginning Balance'])
                inception_capital_contributions_formatted = process_value(row['Period Capital Contribution_2'])
                inception_distributions_formatted = process_value(row['Distribution'])
                inception_management_fees_formatted = process_value(row['Management Fees'])
                inception_net_operating_income_formatted = process_value(row['Net Operating Income'])
                inception_realized_gain_formatted = process_value(row['Realized\nGain (Loss)'])
                inception_unrealized_gain_formatted = process_value(row['Unrealized\nGain (Loss)'])
                inception_net_income_formatted = process_value(
                    safe_sum(
                        row['Management Fees'],
                        row['Net Operating Income'],
                        row['Realized\nGain (Loss)'],
                        row['Unrealized\nGain (Loss)']
                    )
                )
                inception_syndication_formatted = process_value(row['Syndication Costs'])
                inception_lp_formatted = process_value(row['LP Interest'])
                inception_total = f"{int(round(row['Ending Balance_2'], 0)):,}"

                labels = ["Statement of Partner's Capital:", " ", "Partner's Capital", "Capital Contributions", " ", "Distributions", " ", "Net Income", "Management Fees", "Net Operating Income (loss)", "Realized Gain (loss) on Investments", "Unrealized Gain (loss) on Investments", "Net Income", "Syndication Costs", "LP Interest", f"Limited Partner's Capital-{current_date}"]
                quarter_values = ["Quarter to Date", " ", quarter_partner_capital_formatted, quarter_capital_contributions_formatted, " ", quarter_distributions_formatted, " ", " ", quarter_management_fees_formatted, quarter_net_operating_income_formatted, quarter_realized_gain_formatted, quarter_unrealized_gain_formatted, quarter_net_income_formatted, quarter_syndication_formatted, quarter_lp_formatted, quarter_total]
                year_values = ["Year to Date   ", "", year_partner_capital_formatted, year_capital_contributions_formatted, "", year_distributions_formatted, "", "", year_management_fees_formatted, year_net_operating_income_formatted, year_realized_gain_formatted, year_unrealized_gain_formatted, year_net_income_formatted, year_syndication_formatted, year_lp_formatted, year_total]
                inception_values = ["Inception to Date", "", inception_partner_capital_formatted, inception_capital_contributions_formatted, "", inception_distributions_formatted, "", "", inception_management_fees_formatted, inception_net_operating_income_formatted, inception_realized_gain_formatted, inception_unrealized_gain_formatted, inception_net_income_formatted, inception_syndication_formatted, inception_lp_formatted, inception_total]

                generate_header(c, header, company_name, current_date)
                generate_financial_info(c, capital_commitment, capital_contribution)  # Use the extracted values here
                generate_financial_table(c, labels, quarter_values, year_values, inception_values)
                add_notes_box(c)

                c.setLineWidth(2)
                c.line(260, 608, 350, 608)  # Adjusted positions
                c.line(390, 608, 475, 608)
                c.line(510, 608, 600, 608)

                c.line(260, 443, 350, 443)
                c.line(390, 443, 475, 443)
                c.line(510, 443, 600, 443)

                c.line(260, 426, 350, 426)
                c.line(390, 426, 475, 426)
                c.line(510, 426, 600, 426)

                c.line(260, 396, 350, 396)
                c.line(390, 396, 475, 396)
                c.line(510, 396, 600, 396)

                c.setLineWidth(1)
                c.line(260, 382, 350, 382)
                c.line(390, 382, 475, 382)
                c.line(510, 382, 600, 382)
                c.line(260, 379, 350, 379)
                c.line(390, 379, 475, 379)
                c.line(510, 379, 600, 379)

                c.save()

                report_count += 1  # Increment the report count for this fund

            except Exception as e:
                print(f"Error processing row {index} in file {excel_file}: {e}")

        # After processing all rows, print the correct header and the number of reports generated
        print(f"{header} - {report_count} reports")

    except Exception as e:
        print(f"Error processing file {excel_file}: {e}")

print("All files processed.")

# For Fund IV Main

for excel_file in excel_files:
    try:
        file_path = os.path.join(folder_path, excel_file)

        # Load the Excel file
        sheets = ['Quarter', 'Year', 'Inception']
        dfs = pd.read_excel(file_path, sheet_name=sheets)

        df_quarter = dfs['Quarter']
        df_year = dfs['Year']
        df_inception = dfs['Inception']

        df_inception = df_inception.iloc[:, 1:]
        # Reset the column names to shift them appropriately
        df_inception.columns = df_inception.columns.to_list()

        # Applying trim_data, removing duplicates and invalid backstop IDs
        df_quarter = trim_data(df_quarter)
        df_year = trim_data(df_year)
        df_inception = trim_data(df_inception)

        df_quarter = df_quarter[df_quarter.iloc[:, 1].notna()]
        df_quarter = remove_duplicate_columns(df_quarter)

        df_year = df_year[df_year.iloc[:, 1] != 0]
        df_year = remove_duplicate_columns(df_year)

        df_inception = df_inception[df_inception.iloc[:, 1] != 0]
        df_inception = remove_duplicate_columns(df_inception)

        df_quarter = df_quarter.fillna(0)
        df_year = df_year.fillna(0)
        df_inception = df_inception.fillna(0)

        # First merge df_quarter and df_year using the first column as usual
        merged_df = pd.merge(df_quarter, df_year, left_on=df_quarter.columns[0], right_on=df_year.columns[0], suffixes=('_quarter', '_year'))

        # Merge with df_inception, trying the first and then second column
        merged_df = merge_with_fallback(merged_df, df_inception, df_inception.columns[0], df_inception.columns[1])

        final_df = remove_invalid_backstop_id(merged_df)

        # Correct rounding issues
        final_df = final_df.apply(correct_rounding_issues, axis=1)

        # Extract or manually set the correct header
        header = final_df.columns[0]
        if "Unnamed" in header or "Fund Name" in header:
            # Try to manually set the correct header by inspecting the data
            header = final_df.iloc[0, 0]  # Assuming the fund name might be in the first row of the first column
            final_df.columns.values[0] = header  # Rename the column header
        else:
            header = sanitize_filename(header)  # Sanitize the header if it's already correct

        # Define a static or common directory path for all PDFs related to this file
        base_pdf_path = f"/content/drive/MyDrive/PDFs/{header}/"
        os.makedirs(base_pdf_path, exist_ok=True)

        report_count = 0  # To count the number of reports generated for each fund

        for index, row in final_df.iterrows():
            try:

                if row.iloc[0] == "LP Total":
                  break

                # Extract unique values for each report
                capital_commitment = round(row['Subscription\nAmount'])  # Ensure the column name is exactly correct
                capital_contribution = round(row['Capital Contributed'])  # Ensure the column name is exactly correct

                company_name = sanitize_filename(row.iloc[0])  # Company name for each row
                backstop_id = row['Backstop ID']
                name_date = get_closing_date()
                current_date = clean_date()

                # Construct the PDF filename using the common directory path
                pdf_filename = f"{base_pdf_path}{name_date}_UV IV Capital Account {company_name}_{int(backstop_id)}.pdf"

                c = canvas.Canvas(pdf_filename, pagesize=letter)

                # Generate the financial report contents
                quarter_partner_capital_formatted = process_value(row['Previous Qtr. Balance'])
                quarter_capital_contributions_formatted = process_value(row['Quarter Capital Contribution'])
                quarter_distributions_formatted = process_value(row['Distribution_quarter'])
                quarter_management_fees_formatted = process_value(row['Management Fees_quarter'])
                quarter_net_operating_income_formatted = process_value(row['Net Operating Income_quarter'])
                quarter_realized_gain_formatted = process_value(row['Realized\nGain (Loss)_quarter'])
                quarter_unrealized_gain_formatted = process_value(row['Unrealized\nGain (Loss)_quarter'])
                quarter_net_income_formatted = process_value(row['Management Fees_quarter'] + row['Net Operating Income_quarter'] + row['Realized\nGain (Loss)_quarter'] + row['Unrealized\nGain (Loss)_quarter'])
                quarter_syndication_formatted = process_value(row['Syndication Costs_quarter'])
                quarter_lp_formatted = process_value(row['LP Interest_quarter'])
                quarter_total = f"{int(round(row['Current Quarter Ending Balance'], 0)):,}"

                year_partner_capital_formatted = process_value(row['Prior Year Balance'])
                year_capital_contributions_formatted = process_value(row['Period Capital Contribution_1'])
                year_distributions_formatted = process_value(row['Distribution_year'])
                year_management_fees_formatted = process_value(row['Management Fees_year'])
                year_net_operating_income_formatted = process_value(row['Net Operating Income_year'])
                year_realized_gain_formatted = process_value(row['Realized\nGain (Loss)_year'])
                year_unrealized_gain_formatted = process_value(row['Unrealized\nGain (Loss)_year'])
                year_net_income_formatted = process_value(row['Management Fees_year'] + row['Net Operating Income_year'] + row['Realized\nGain (Loss)_year'] + row['Unrealized\nGain (Loss)_year'])
                year_syndication_formatted = process_value(row['Syndication Costs_year'])
                year_lp_formatted = process_value(row['LP Interest_year'])
                year_total = f"{int(round(row['Ending Balance_1'], 0)):,}"

                inception_partner_capital_formatted = process_value(row['Beginning Balance'])
                inception_capital_contributions_formatted = process_value(row['Period Capital Contribution_2'])
                inception_distributions_formatted = process_value(row['Distribution'])
                inception_management_fees_formatted = process_value(row['Management Fees'])
                inception_net_operating_income_formatted = process_value(row['Net Operating Income'])
                inception_realized_gain_formatted = process_value(row['Realized\nGain (Loss)'])
                inception_unrealized_gain_formatted = process_value(row['Unrealized\nGain (Loss)'])
                inception_net_income_formatted = process_value(row['Management Fees'] + row['Net Operating Income'] + row['Realized\nGain (Loss)'] + row['Unrealized\nGain (Loss)'])
                inception_syndication_formatted = process_value(row['Syndication Costs'])
                inception_lp_formatted = process_value(row['LP Interest'])
                inception_total = f"{int(round(row['Ending Balance_2'], 0)):,}"

                labels = ["Statement of Partner's Capital:", " ", "Partner's Capital", "Capital Contributions", " ", "Distributions", " ", "Net Income", "Management Fees", "Net Operating Income (loss)", "Realized Gain (loss) on Investments", "Unrealized Gain (loss) on Investments", "Net Income", "Syndication Costs", "LP Interest", f"Limited Partner's Capital-{current_date}"]
                quarter_values = ["Quarter to Date", " ", quarter_partner_capital_formatted, quarter_capital_contributions_formatted, " ", quarter_distributions_formatted, " ", " ", quarter_management_fees_formatted, quarter_net_operating_income_formatted, quarter_realized_gain_formatted, quarter_unrealized_gain_formatted, quarter_net_income_formatted, quarter_syndication_formatted, quarter_lp_formatted, quarter_total]
                year_values = ["Year to Date   ", "", year_partner_capital_formatted, year_capital_contributions_formatted, "", year_distributions_formatted, "", "", year_management_fees_formatted, year_net_operating_income_formatted, year_realized_gain_formatted, year_unrealized_gain_formatted, year_net_income_formatted, year_syndication_formatted, year_lp_formatted, year_total]
                inception_values = ["Inception to Date", "", inception_partner_capital_formatted, inception_capital_contributions_formatted, "", inception_distributions_formatted, "", "", inception_management_fees_formatted, inception_net_operating_income_formatted, inception_realized_gain_formatted, inception_unrealized_gain_formatted, inception_net_income_formatted, inception_syndication_formatted, inception_lp_formatted, inception_total]

                generate_header(c, header, company_name, current_date)
                generate_financial_info(c, capital_commitment, capital_contribution)  # Use the extracted values here
                generate_financial_table(c, labels, quarter_values, year_values, inception_values)
                add_notes_box(c)

                c.setLineWidth(2)
                c.line(260, 608, 350, 608)  # Adjusted positions
                c.line(390, 608, 475, 608)
                c.line(510, 608, 600, 608)

                c.line(260, 443, 350, 443)
                c.line(390, 443, 475, 443)
                c.line(510, 443, 600, 443)

                c.line(260, 426, 350, 426)
                c.line(390, 426, 475, 426)
                c.line(510, 426, 600, 426)

                c.line(260, 396, 350, 396)
                c.line(390, 396, 475, 396)
                c.line(510, 396, 600, 396)

                c.setLineWidth(1)
                c.line(260, 382, 350, 382)
                c.line(390, 382, 475, 382)
                c.line(510, 382, 600, 382)
                c.line(260, 379, 350, 379)
                c.line(390, 379, 475, 379)
                c.line(510, 379, 600, 379)

                c.save()

                report_count += 1  # Increment the report count for this fund

            except Exception as e:
                print(f"Error processing row {index} in file {excel_file}: {e}")

        # After processing all rows, print the correct header and the number of reports generated
        print(f"{header} - {report_count} reports")

    except Exception as e:
        print(f"Error processing file {excel_file}: {e}")

print("All files processed.")