# -*- coding: utf-8 -*-
"""publicPositions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fHziFjz_Tof99VWzeVIVU9eMaLDQGJc0

1. Fetch stock prices via API
2. Reads excel spreadsheet for Number of Shares
3. Multiplies the two for Stock Value
4. Updates Excel spreadsheet
5. Updates the Power Point template
6. Set to update automatically every Monday at 9am
"""

import requests
import openpyxl
import time

# Define constants for API
API_KEY = 'csn4hk1r01qqapai49ogcsn4hk1r01qqapai49p0'
BASE_URL = 'https://finnhub.io/api/v1/quote'
FILE_PATH = '/Users/harrisonstone/WebApp/app/data/PricePositions.xlsx'  # Update this to the local file path

# Define a function to get stock price
def get_stock_price(symbol):
    # Construct the API URL for the specific stock symbol
    url = f"{BASE_URL}?symbol={symbol}&token={API_KEY}"
    response = requests.get(url)
    data = response.json()
    
    # Check if the response contains the necessary data
    if 'c' in data:
        return float(data['c'])  # 'c' is the current (real-time) price
    else:
        raise ValueError(f"Unable to fetch price for {symbol}. Response: {data}")

# Define a function to read data from Excel
def read_excel(file_path, cell):
    workbook = openpyxl.load_workbook(file_path, data_only=True)
    sheet = workbook['Final']
    return sheet[cell].value

# Define a function to update Excel
def update_excel(file_path, value, cell):
    workbook = openpyxl.load_workbook(file_path)
    sheet = workbook['Final']
    sheet[cell] = value
    workbook.save(file_path)

# Define main function to fetch data
def get_public_positions():
    data = []

    # Define the stocks to process
    stocks = [
        {"symbol": "OWLT", "num_shares_cell": "C10", "price_cell": "C11", "value_cell": "C13"},
        {"symbol": "RCAT", "num_shares_cell": "B17", "price_cell": "B18", "value_cell": "B20"},
        {"symbol": "BILL", "num_shares_cell": "B24", "price_cell": "B25", "value_cell": "B27"},
        {"symbol": "WEAV", "num_shares_cell": "B33", "price_cell": "B34", "value_cell": "B36"},
    ]

    # Loop through each stock and gather data
    for stock in stocks:
        symbol = stock["symbol"]
        num_shares_cell = stock["num_shares_cell"]
        price_cell = stock["price_cell"]
        value_cell = stock["value_cell"]

        # Get stock price and number of shares
        stock_price = get_stock_price(symbol)
        num_shares = read_excel(FILE_PATH, num_shares_cell)

        # Calculate stock value
        stock_value = round(num_shares * stock_price)

        # Update Excel with new price and value
        update_excel(FILE_PATH, stock_price, price_cell)
        update_excel(FILE_PATH, stock_value, value_cell)

        # Append data to list
        data.append({
            "position": symbol,
            "shares": num_shares,
            "price_per_share": stock_price,
            "total_value": stock_value
        })

    return data


# import requests
# import openpyxl

# # Establish API KEY and URL
# API_KEY = '3UBUGQ9UI4WEECY9'
# URL = 'https://www.alphavantage.co/query'

# def get_public_positions():

#   def OWLT():
#     #Function that takes stock symbol like 'AAPL' and returns latest closed stock price
#     def get_stock_price(symbol):
#       #These parameters are needed to pass to the alpha vantage page request
#       params = {
#           'function': 'time_series_daily',
#           'symbol': symbol,
#           'apikey': API_KEY,
#           'outputsize': 'compact'
#       }
#       #Response gets all the data for the specified stock
#       response = requests.get(URL, params=params)
#       #Data holds this data in json format
#       data = response.json()
#       #This queries the time stamps to keep only the most recent day
#       latest_date = list(data['Time Series (Daily)'].keys())[0]
#       # this returns only the most recent closing price
#       return data['Time Series (Daily)'][latest_date]['4. close']
#     #variable to represent this function output
#     OWLT_stock_price = get_stock_price('OWLT')
#     OWLT_stock_price = float(OWLT_stock_price)

#     #function to get Number of Shares from excel spreadsheet
#     def read_excel(file_path, cell):
#       #Identify value of cell within specified sheet and workbook
#       workbook = openpyxl.load_workbook(file_path, data_only=True)
#       sheet = workbook['Final']
#       return sheet[cell].value
#     #identify path to spreadsheet
#     file_path = '/content/drive/MyDrive/Pitch Prices Auto/PricePositions.xlsx'
#     #variable for number of shares in spreadsheet
#     OWLT_num_shares = read_excel(file_path, 'C10')
#     # stock_price = f"{round(float(stock_price),2):.2f}"
#     OWLT_stock_price = float(OWLT_stock_price)
#     OWLT_num_shares = float(OWLT_num_shares)
#     #Multiply number of stocks and stock price for overall value
#     OWLT_stock_value = round(OWLT_num_shares * OWLT_stock_price)

#     #Function to update excel with the stock value
#     def update_stock_value(file_path, OWLT_stock_value, cell):
#       #Input stock value to specified cell
#       workbook = openpyxl.load_workbook(file_path)
#       sheet = workbook['Final']
#       sheet[cell] = OWLT_stock_value
#       workbook.save(file_path)
#     #Call update function
#     update_stock_value(file_path, OWLT_stock_value, 'C13')

#     #Function to update excel with the stock value
#     def update_stock_price(file_path, OWLT_stock_price, cell):
#       #Input stock value to specified cell
#       workbook = openpyxl.load_workbook(file_path)
#       sheet = workbook['Final']
#       sheet[cell] = OWLT_stock_price
#       workbook.save(file_path)
#     #Call update function
#     update_stock_price(file_path, OWLT_stock_price, 'C11')

#     #Check with spreadsheet
#     return OWLT_stock_price, OWLT_num_shares, OWLT_stock_value

#   OWLT()

#   def RCAT():
#     #Function that takes stock symbol like 'AAPL' and returns latest closed stock price
#     def get_stock_price(symbol):
#       #These parameters are needed to pass to the alpha vantage page request
#       params = {
#           'function': 'time_series_daily',
#           'symbol': symbol,
#           'apikey': API_KEY,
#           'outputsize': 'compact'
#       }
#       #Response gets all the data for the specified stock
#       response = requests.get(URL, params=params)
#       #Data holds this data in json format
#       data = response.json()
#       #This queries the time stamps to keep only the most recent day
#       latest_date = list(data['Time Series (Daily)'].keys())[0]
#       # this returns only the most recent closing price
#       return data['Time Series (Daily)'][latest_date]['4. close']
#     #variable to represent this function output
#     RCAT_stock_price = get_stock_price('RCAT')
#     RCAT_stock_price = float(RCAT_stock_price)

#     #function to get Number of Shares from excel spreadsheet
#     def read_excel(file_path, cell):
#       #Identify value of cell within specified sheet and workbook
#       workbook = openpyxl.load_workbook(file_path, data_only=True)
#       sheet = workbook['Final']
#       return sheet[cell].value
#     #identify path to spreadsheet
#     file_path = '/content/drive/MyDrive/Pitch Prices Auto/PricePositions.xlsx'
#     #variable for number of shares in spreadsheet
#     RCAT_num_shares = read_excel(file_path, 'B17')
#     # stock_price = f"{round(float(stock_price),2):.2f}"
#     RCAT_stock_price = float(RCAT_stock_price)
#     RCAT_num_shares = float(RCAT_num_shares)
#     #Multiply number of stocks and stock price for overall value
#     RCAT_stock_value = round(RCAT_num_shares * RCAT_stock_price)

#     #Function to update excel with the stock value
#     def update_stock_value(file_path, RCAT_stock_value, cell):
#       #Input stock value to specified cell
#       workbook = openpyxl.load_workbook(file_path)
#       sheet = workbook['Final']
#       sheet[cell] = RCAT_stock_value
#       workbook.save(file_path)
#     #Call update function
#     update_stock_value(file_path, RCAT_stock_value, 'B20')

#     #Function to update excel with the stock value
#     def update_stock_price(file_path, RCAT_stock_price, cell):
#       #Input stock value to specified cell
#       workbook = openpyxl.load_workbook(file_path)
#       sheet = workbook['Final']
#       sheet[cell] = RCAT_stock_price
#       workbook.save(file_path)
#     #Call update function
#     update_stock_price(file_path, RCAT_stock_price, 'B18')

#     #Check with spreadsheet
#     return RCAT_stock_price, RCAT_num_shares, RCAT_stock_value

#   RCAT()

#   def BILL():
#     #Function that takes stock symbol like 'AAPL' and returns latest closed stock price
#     def get_stock_price(symbol):
#       #These parameters are needed to pass to the alpha vantage page request
#       params = {
#           'function': 'time_series_daily',
#           'symbol': symbol,
#           'apikey': API_KEY,
#           'outputsize': 'compact'
#       }
#       #Response gets all the data for the specified stock
#       response = requests.get(URL, params=params)
#       #Data holds this data in json format
#       data = response.json()
#       #This queries the time stamps to keep only the most recent day
#       latest_date = list(data['Time Series (Daily)'].keys())[0]
#       # this returns only the most recent closing price
#       return data['Time Series (Daily)'][latest_date]['4. close']
#     #variable to represent this function output
#     BILL_stock_price = get_stock_price('BILL')
#     BILL_stock_price = float(BILL_stock_price)

#     #function to get Number of Shares from excel spreadsheet
#     def read_excel(file_path, cell):
#       #Identify value of cell within specified sheet and workbook
#       workbook = openpyxl.load_workbook(file_path, data_only=True)
#       sheet = workbook['Final']
#       return sheet[cell].value
#     #identify path to spreadsheet
#     file_path = '/content/drive/MyDrive/Pitch Prices Auto/PricePositions.xlsx'
#     #variable for number of shares in spreadsheet
#     BILL_num_shares = read_excel(file_path, 'B24')
#     # stock_price = f"{round(float(stock_price),2):.2f}"
#     BILL_stock_price = float(BILL_stock_price)
#     BILL_num_shares = float(BILL_num_shares)
#     #Multiply number of stocks and stock price for overall value
#     BILL_stock_value = round(BILL_num_shares * BILL_stock_price)

#     #Function to update excel with the stock value
#     def update_stock_value(file_path, BILL_stock_value, cell):
#       #Input stock value to specified cell
#       workbook = openpyxl.load_workbook(file_path)
#       sheet = workbook['Final']
#       sheet[cell] = BILL_stock_value
#       workbook.save(file_path)
#     #Call update function
#     update_stock_value(file_path, BILL_stock_value, 'B27')

#     #Function to update excel with the stock value
#     def update_stock_price(file_path, BILL_stock_price, cell):
#       #Input stock value to specified cell
#       workbook = openpyxl.load_workbook(file_path)
#       sheet = workbook['Final']
#       sheet[cell] = BILL_stock_price
#       workbook.save(file_path)
#     #Call update function
#     update_stock_price(file_path, BILL_stock_price, 'B25')

#     #Check with spreadsheet
#     return BILL_stock_price, BILL_num_shares, BILL_stock_value

#   BILL()

#   def WEAV():
#     #Function that takes stock symbol like 'AAPL' and returns latest closed stock price
#     def get_stock_price(symbol):
#       #These parameters are needed to pass to the alpha vantage page request
#       params = {
#           'function': 'time_series_daily',
#           'symbol': symbol,
#           'apikey': API_KEY,
#           'outputsize': 'compact'
#       }
#       #Response gets all the data for the specified stock
#       response = requests.get(URL, params=params)
#       #Data holds this data in json format
#       data = response.json()
#       #This queries the time stamps to keep only the most recent day
#       latest_date = list(data['Time Series (Daily)'].keys())[0]
#       # this returns only the most recent closing price
#       return data['Time Series (Daily)'][latest_date]['4. close']
#     #variable to represent this function output
#     WEAV_stock_price = get_stock_price('WEAV')
#     WEAV_stock_price = float(WEAV_stock_price)

#     #function to get Number of Shares from excel spreadsheet
#     def read_excel(file_path, cell):
#       #Identify value of cell within specified sheet and workbook
#       workbook = openpyxl.load_workbook(file_path, data_only=True)
#       sheet = workbook['Final']
#       return sheet[cell].value
#     #identify path to spreadsheet
#     file_path = '/content/drive/MyDrive/Pitch Prices Auto/PricePositions.xlsx'
#     #variable for number of shares in spreadsheet
#     WEAV_num_shares = read_excel(file_path, 'B33')
#     # stock_price = f"{round(float(stock_price),2):.2f}"
#     WEAV_stock_price = float(WEAV_stock_price)
#     WEAV_num_shares = float(WEAV_num_shares)
#     #Multiply number of stocks and stock price for overall value
#     WEAV_stock_value = round(WEAV_num_shares * WEAV_stock_price)

#     #Function to update excel with the stock value
#     def update_stock_value(file_path, WEAV_stock_value, cell):
#       #Input stock value to specified cell
#       workbook = openpyxl.load_workbook(file_path)
#       sheet = workbook['Final']
#       sheet[cell] = WEAV_stock_value
#       workbook.save(file_path)
#     #Call update function
#     update_stock_value(file_path, WEAV_stock_value, 'B36')

#     #Function to update excel with the stock value
#     def update_stock_price(file_path, WEAV_stock_price, cell):
#       #Input stock value to specified cell
#       workbook = openpyxl.load_workbook(file_path)
#       sheet = workbook['Final']
#       sheet[cell] = WEAV_stock_price
#       workbook.save(file_path)
#     #Call update function
#     update_stock_price(file_path, WEAV_stock_price, 'B34')

#     #Check with spreadsheet
#     return WEAV_stock_price, WEAV_num_shares, WEAV_stock_value

#   WEAV()

#   data = [
#     {"position": "OWLT", "shares": OWLT_num_shares}
#   ]